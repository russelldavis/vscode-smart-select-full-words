{
  "name": "smart-select-full-words",
	"displayName": "Smart Select Full Words (custom regex)",
	"description": "",
	"version": "0.0.1",
	"publisher": "russelldavis",
	"license": "MIT",
	"engines": {
		"vscode": "^1.62.0"
	},
	"categories": [
		"Other"
	],
	"activationEvents": [
		"onStartupFinished"
	],
	"main": "./out/extension.js",
	"contributes": {
		"commands": [
			{
				"command": "smartSelectFullWords.expand",
				"title": "Hello World"
			}
		],
		"configuration": {
			"title": "Smart Select Full Words",
			"properties": {
				"smartSelectFullWords.regexes": {
					"description": "To disable a default value, set it to empty. If the name is prefixed by `!: `, the match will be selected immediately (bypassing selection of smaller words) when using the `smartSelectFullWords.expand` command (you can then shrink the selection to smaller words by running the builtin Shrink Selection command).",
					"type": "object",
					"additionalProperties": {
						"type": "string"
					},
					"// test url": "http://foo-bar.com:5555/index.html?foo=bar&baz=qux",
					"// test tailwind": "foo-bar-[rgb(1,2,3)] group:data-[state=foo]:bar-[rgb(1,2,3)] foo-bar/50, foo-bar/[0.2] foo/2 foo@bar@[baz] foo[bar]",
					"// test subwords": "foo_bar fooBar",
					"// test function": "foo(bar, 1, 'baz')",
					"// test path": "foo /bar/baz/qux/ fizz",
					"// catch$all@words1": "only excludes chars that can come directly after words in properly styled code (don't want to select `foo(bar` in `foo(bar, baz)`, `Foo<T` in `type Foo<T extends Bar>`, or `baz;` in `foo = baz;`)",
					"// catch$all@words2": "starts with \\w so we don't select parts of bigger compound words (like `:hidden` in `data-[state=closed]:hidden`)",
					"// catch$all@words3": "ends with \\w so we don't select periods at ends of sentences or `foo-` in `foo-[bar]`",
					"default": {
						"!2: dashed-words": "[\\w\\-]+\\w",
						"dashed-and-dotted.words": "[\\w\\-.]+\\w",
						"!1: tailwind rules": "([\\w\\-]+\\w(-\\[[^\\]]*\\])?(:|$|(?=[^\\w\\-])))+(\\/(\\d+|\\[[\\d.]+\\]))?",
						"catch$all@words": "\\w[^\\s;,<>(){}\\[\\]'`\"]+\\w"
					}
				}
			}
		}
	},
	"scripts": {
		"vscode:prepublish": "npm run compile",
		"compile": "tsc -p ./",
		"watch": "tsc -watch -p ./",
		"pretest": "npm run compile && npm run lint",
		"lint": "eslint src --ext ts",
		"test": "node ./out/test/runTest.js"
	},
	"devDependencies": {
		"@types/vscode": "^1.62.0",
		"@types/glob": "^7.1.4",
		"@types/mocha": "^9.0.0",
		"@types/node": "14.x",
		"@typescript-eslint/eslint-plugin": "^6.7.2",
		"@typescript-eslint/parser": "^6.7.2",
		"eslint": "^8.49.0",
		"glob": "^7.1.7",
		"mocha": "^9.1.3",
		"typescript": "^5.2.2",
		"@vscode/test-electron": "^1.6.2"
	}
}
